#!/bin/bash
# script to back up and archive files NOTE: ideally would call svn or git commit to keep in version control
# example1: archive httpd.conf -> will archive httpd.conf with current directory to archive directory preserving directory structure
# example2: archive -c httpd.conf -> will replace the current archive file in the current dir location with the existing file preserving directory structure
# the idea being you can re-create a server and then lay down the current files to replace configurations easily
# Recommended to add the following to your .profile: export UARCHIVE_HOME=$HOME/uarchive/archive (or wherever you put it)

# TEST CASES:
# -- NO UARCHIVE_HOME variable set: --
#   backup a file in a directory
#   restore a file in a directory
#   backup all files in directory  # QUESTION: should we prevent this?
#   restore all files in directory * NOTE: should fail with nice error?
# -- WITH VARIABLE SET --
#   backup file in directory
#   restore file from directory
#   backup all files in directory (shouldn't be recursive)
#   restore all files in directory (from the destination directory not archive)
#   backup a fully qualified file/path from a differnt working directory
#   restore a fully qualified file/path from a different working directory

#   NOTE: test both the file and directory cases above

#   restore all files in current archive
#   restore all files in dated archive * NOTE: should fail with nice error
#   restore a file from dated archive (from working directory and fully qualified from a different directory)
#   restore a current archive directory & files (should be recursive)   

yell() { echo "$0: $*" >&2; }
die() { yell "$*"; exit 111; }
try() { "$@" || die "cannot $*"; }

# Initialize our constants:
MAKE_CHANGES=true
IGNORE_FILES=".DS_Store .git"
# Initialize our own variables:
_opt_verbose=false
_opt_current=false
_opt_restore=false
_opt_sync=false
_full_file=""

debug () {
		if [ "$_opt_verbose" = "true" ] ; then
        	# log all messages
        	echo $1;
        fi
}

show_help() {
    echo "usage: archive [-h?][-v][-c][-r][-R]"
    echo " ex: archive -c file.txt"
    echo "     -h or ?: show usage help"
    echo "     -v: show verbose logging"
    echo "     -c: archive to current folder as well as dated folder"
    echo "     -r: make dated backup of all files in current archive then restore to external locations"
    echo "     -s: sync all current files with the current location contents if they differ"
    debug "          NOTE: primarily thinking it will be used by cron to keep the archive current folder up to date on a server if someone forgets to archive current changes"
    debug "          NOTE: this may not be what we want since it will "always" make sure the current file is current"
    debug "          TODO: implement when needed"
    # echo "     -R: recursive; apply to any subdirectories and files as well"
    echo " no option: only archive file or directory items to the dated folder"
    echo " no file arg: use current directory"
}

# determine if the path is relative and if so adds the pwd or passed parameter; we need to do operations on absolute files
get_absolute_file() {
    # echo "gaf _full_file: $_full_file"
    # echo "gaf _opt_file: $_opt_file"
    # get the current directory for use
    _gaf_curdir=$(pwd)    
    # echo "gaf curdir: $_gaf_curdir"
    # echo "gaf optfile: $_opt_file"
    # if the option passed doesn't start with a slash then append the cwd
    if [[ ${_opt_file:0:1} == "/" ]] ;then 
        echo $_opt_file 
    else
        echo "$_gaf_curdir/$_opt_file"
    fi
}
# similar to get_pwd_file but instead of using the current directory use what is passed
strip_archive_directory() {
    # if it is the dated or current archive directories strip it off
    #debug "arg1: $1"
    if [[ "$(echo "$1" | grep "$_current_folder")" != "" ]]; then
        _tmp_len=${#_current_folder}
        tmp_file=${1:_tmp_len}
    elif [[ "$(echo "$1" | grep "$_dated_folder")" != "" ]]; then
        _tmp_len=${#_dated_folder}
        tmp_file=${1:_tmp_len}
    else
        tmp_file="$1"
    fi
    echo $tmp_file
}
get_date_ext() {
    echo $(date +%Y%m%d%H%M%S)
}
strip_date_ext() {
    # if the directory contains $ARCHIVE_DATED then strop the .date part off
    echo ${1%.*}
}
strip_slash() {
    echo "$1"|sed 's/\/$//g'
}
strip_leading_slash() {
    echo "$1"|sed 's/^\///g'
}
trim() {
    local var="$*"
    # remove leading whitespace characters
    var="${var#"${var%%[![:space:]]*}"}"
    # remove trailing whitespace characters
    var="${var%"${var##*[![:space:]]}"}"
    echo -n "$var"
}
has_date_ext() {
    # if the stuff after the dot is a number then we will consider it a date extension
#    debug "1: $1"
    _hde_dt=$(echo ${1##*.})
#    debug "hde_dt: $_hde_dt"
    if [[ "$_hde_dt" == "" ]]; then
        echo "false"
    else
        # TODO: consider limiting the characters to 14?
        re='^[0-9]+$'
        if ! [[ $_hde_dt =~ $re ]] ; then
            echo "false" >&2
        else
            echo "true"
        fi        
    fi
}
archive_file() {
    _sfile="$1"
    if [[ -z $2 ]]; then
        _enable_current=true
        debug "[create_archive] enable current was missing; defualting to true"
    else
        _enable_current="$2"
        debug "[create_archive] enable current: $_enable_current"
    fi
    debug "[create_archive] _sfile: $_sfile"
    _full_file_current=$(get_current_archive_from_file $_sfile)
    _full_file_dated=$(get_dated_archive_from_file $_sfile)    
    debug "[create_archive] full_file_current: [$_full_file_current]"
    debug "[create_archive] full_file_dated: [$_full_file_dated]"
    debug "[create_archive] full_file_requested: [$_sfile]"
    # f will be the file portion of the current file 
    _f=$(basename "${_sfile}")
    debug "[create_archive] f: [$_f]"
    if echo $IGNORE_FILES | grep -w "$_f" > /dev/null; then
        debug "[create_archive] $_f was in the ignore list; not archiving..."
    else
        debug "[create_archive] $_f was not in the ignore list; archiving..."
        if [[ "$MAKE_CHANGES" == "true" ]]; then
            debug "[create_archive] copying [$_sfile] to [$_full_file_dated]"
            try cp -p $_sfile $_full_file_dated
            if [[ "$_opt_current" = "true" && "$_enable_current" = "true" ]]; then
                debug "[create_archive] copying [$_sfile] to [$_full_file_current]"
                try cp -p $_sfile $_full_file_current
            fi

        fi
        echo "archived [$_sfile] to [$_full_file_dated]"
        if [[ "$_opt_current" = "true" && "$_enable_current" = "true" ]]; then
            echo "archived [$_sfile] to [$_full_file_current]"
        fi
#        echo ""
    fi                
}
get_current_archive_from_file() {
    _sfile="$1"
    _s_sfile="$(strip_leading_slash $_sfile)"
    _full_file_current="$_current_folder"
    _s_sfile=$(strip_leading_slash $_sfile)
    if [[ "$_full_file_current" == "" ]]; then
#        debug "[archive_file] current folder is empty; ..."
        _full_file_current=$_sfile
    else
#        debug "[archive_file] current folder is not empty..."
        _full_file_current=$_full_file_current/$_s_sfile
    fi
    echo "$_full_file_current"
}
get_dated_archive_from_file() {
    _sfile="$1"
    _s_sfile=$(strip_leading_slash $_sfile)
    _full_file_dated="$_dated_folder"
    if [[ "$_full_file_dated" == "" ]]; then
        _full_file_dated=$_sfile.$_archive_ext
    else
        _full_file_dated=$_full_file_dated/$_s_sfile.$_archive_ext
    fi
    echo "$_full_file_dated"
}

# in restore_current_file the param is the file to be resotred (not in the archive dir)
restore_current_file() {
    _sfile="$1"
    debug "[restore_current_file] _sfile: $_sfile"
    _full_file_current=$(get_current_archive_from_file $_sfile)
    _full_file_dated=$(get_dated_archive_from_file $_sfile)    
    debug "[restore_current_file] full_file_current: [$_full_file_current]"
    debug "[restore_current_file] full_file_dated: [$_full_file_dated]"
    debug "[restore_current_file] full_file_requested: [$_sfile]"
    # f will be the file portion of the current file
    _f=$(basename "${_sfile}")
    debug "[restore_current_file] f: [$_f]"
    if echo $IGNORE_FILES | grep -w "$_f" > /dev/null; then
        debug "[restore_current_file] $_f was in the ignore list; not restoring..."
    else
        debug "[restore_current_file] $_f was not in the ignore list; restoring..."
        if [[ "$MAKE_CHANGES" == "true" ]]; then
            debug "[restore_current_file] copying [$_sfile] to [$_full_file_dated]"
            try cp -p $_sfile $_full_file_dated
            debug "[restore_current_file] copying [$_full_file_current] to [$_sfile]"
            try cp -p $_full_file_current $_s_file
        fi
        echo "archived [$_sfile] to [$_full_file_dated]"
        echo "restored [$_full_file_current] to [$_sfile]"
        echo ""
    fi
}
# in restore_current_archive_file the param is the file in the current archive direcotry to be restored
restore_current_archive_file() {
    _source_archive_file="$1"
    debug "[restore_current_archive_file] _source_archive_file: $_source_archive_file"
    _sfile=$(strip_archive_directory $_source_archive_file)
    debug "[restore_current_archive_file] _sfile: $_sfile"
    _full_file_current=$(get_current_archive_from_file $_sfile)
    _full_file_dated=$(get_dated_archive_from_file $_sfile)    
    debug "[restore_current_archive_file] full_file_current: [$_full_file_current]"
    debug "[restore_current_archive_file] full_file_dated: [$_full_file_dated]"
    debug "[restore_current_archive_file] full_file_requested: [$_sfile]"
    
    # replace sfile with the passed archive file
    # f will be the file portion of the current file 
    _f=$(basename "${_sfile}")
    debug "[restore_current_archive_file] f: [$_f]"
    if echo $IGNORE_FILES | grep -w "$_f" > /dev/null; then
        debug "[restore_current_archive_file] $_f was in the ignore list; not restoring..."
    else
        debug "[restore_current_archive_file] $_f was not in the ignore list; restoring..."
        if [[ "$MAKE_CHANGES" == "true" ]]; then
            debug "[restore_current_file] copying [$_sfile] to [$_full_file_dated]"
            try cp -p $_sfile $_full_file_dated
            debug "[restore_current_archive_file] copying [$_source_archive_file] to [$_sfile]"
            try cp -p $_source_archive_file $_sfile
        fi
        echo "archived [$_sfile] to [$_full_file_dated]"
        echo "restored [$_source_archive_file] to [$_sfile]"
        echo ""
    fi                
}
# in the restore_dated_archive_file the param is the file in the dated archive direcotry to be restored with the dated extension
restore_dated_archive_file() {
    _source_dated_archive_file="$1"
    debug "[restore_dated_archive_file] _source_dated_archive_file: $_source_dated_archive_file"
    _sfile=$(strip_archive_directory $_source_dated_archive_file)
    if [[ "$(has_date_ext $_sfile)" == "true" ]]; then
        _sfile="$(strip_date_ext $_sfile)"
    fi
    debug "[restore_dated_archive_file] _sfile: $_sfile"
    _full_file_dated=$(get_dated_archive_from_file $_sfile)    
    debug "[restore_dated_archive_file] full_file_dated: [$_full_file_dated]"
   
    # replace sfile with the passed archive file
    # f will be the file portion of the current file 
    _f=$(basename "${_sfile}")
    debug "[restore_dated_archive_file] f: [$_f]"
    if echo $IGNORE_FILES | grep -w "$_f" > /dev/null; then
        debug "[restore_dated_archive_file] $_f was in the ignore list; not restoring..."
    else
        debug "[restore_dated_archive_file] $_f was not in the ignore list; restoring..."
        if [[ "$MAKE_CHANGES" == "true" ]]; then
            debug "[restore_dated_archive_file] copying [$_sfile] to [$_full_file_dated]"
            try cp -p $_sfile $_full_file_dated
            debug "[restore_dated_archive_file] copying [$_source_dated_archive_file] to [$_sfile]"
            try cp -p $_source_dated_archive_file $_sfile
        fi
        echo "archived [$_sfile] to [$_full_file_dated]"
        echo "restored [$_source_dated_archive_file] to [$_sfile]"
        echo ""
    fi                
}

_archive() {
    debug "[_archive] called archive function"
    # if directory we need to do a loop otherwise we just do one file
    if [[ -d "$_full_file" ]]; then
        echo "You have requested to back up all files in directory [$_full_file]."
        echo "NOTE: this is not recursive; it will only apply to files in this direcotry not any subdirectories"
        echo " "
        echo 'Are you sure you want to archive all the files in this directory? [y/N]'
        read _user_answer
        debug "[_archive] user answer: [$_user_answer]"
        echo ""
        if [[ "$_user_answer" != "y" && "$_user_answer" != "Y" ]]; then
            echo "done"
            exit 0
        fi
        
        debug "[_archive] _full_file: $_full_file"
        # looping through all files in the passed folder and archiving them
        # so it turns out when you use the full path the full path is included no need to append
        for fd in $(find $_full_file/* -prune -type f); do
            debug "[_archive] archiving [$fd]..."
            archive_file "$fd"
        done

    elif [[ -f "$_full_file" ]]; then
        archive_file "$_full_file"
    else
        debug "[_archive] [ $_full_file ] not found or is not a file or directory!"
        echo "[$_full_file] not found!"
    fi
}

_restore() {
    debug "called restore function"
    # NOTE: we check for exactness in dated folder first then current; make function?
    debug "opt_restore is true; determining if we are restoring everything in the archive, one file or directory in the archive or everything in a folder or one file or directory in current folder or the archive"
    debug ""
    debug "test: restore dated file to location, dated dir to location, current file to location current dir to location"
    # if the file argument is blank then we want to prompt and restore everything in the directory as long as we have the current working directory in the archive; do a makedir -p to ensure each subdirectory exists first
    # first: if we don't have an UARCHIVE_HOME (we are using the current directory) we want to:
    #   - if _opt_file is blank (and doesn't catch by directory) then give a message that you must act on a file and quit
    #   - if _opt_file is a file -> look for the latest dated version of that file to act upon (since the current file is the file)
    #   - if _opt_file is a directory -> prompt and error for now that we only allow restoring individual files when UARCHIVE_HOME is not set
    #   - if _opt_file is a dated file -> archive the current and replace with this dated version
    # next: if we have an UARCHIVE_HOME we want to:
    #   - if _opt_file is blank we want to attempt to back up all files in this directory (for any file in the current directory) and restore them
    #       NOTE: if this directory is in archive directory we instead backup the location - current /dated and then backup and restore that file
    #       NOTE: in any case if archive file does not exist on filesystem we don't backup but do the restore....
    #   - if _opt_file is a file or directory in the archive directory we want to backup and restore those files
    #   - if _opt_file is a file or directory not in the archive directory we want to backup and restore that file or directory if it exists in current
    debug "[_restore] checking for blank archive (using current directory archives)"
    _curdir=$(pwd)

    if [[ "$UARCHIVE_HOME" == "" ]]; then
        # ------ we do not have archive folder ------
        debug "[_restore] no UARCHIVE_HOME found..."
        debug "[_restore] we are using the current directory for backups"
        if [[ "$_opt_file" = "" ]]; then
            echo "You currently have backups set to the directory the file is in.  You requested to restore [$_curdir] but this script does not support directories.  You must specify a file to restore if you do not have an UARCHIVE_HOME set."
            # debug "[_restore] TODO: add code to apply the latest dated files in the current directory later (PROMPT FIRST!)"
            echo ""
            exit 1
        else
            if [[ -d "$_opt_file" ]]; then
                echo "You currently have backups set to the directory the file is in.  You requested to restore [$_curdir] but this script does not support directories.  You must specify a file to restore if you do not have an UARCHIVE_HOME set."
                echo ""
                exit 1
            fi
        fi
        debug "_opt_file: [$_opt_file]"
        is_dated=$(has_date_ext "$_opt_file")
        debug "is_dated: [$is_dated]"
        if [[ "$is_dated" == "true" ]]; then
            debug "[_restore] [$_opt_file] is dated; date archiving current one, if it exists and restoring this dated file as current"
            _tmp_file="$(strip_date_ext $_full_file)"
            debug "[_restore] tmp_file: [$_tmp_file]"
            _full_file_current="$_current_folder"
            if [[ "$_full_file_current" == "" ]]; then
                debug "full_file_current is empty..."
                _full_file_current=$_tmp_file
            else
                debug "full_file_current is not empty..."
                _full_file_current=$_full_file_current/$_tmp_file                
            fi            
            _full_file_archive="$_dated_folder"
            if [[ "$_full_file_archive" == "" ]]; then
                _full_file_archive=$_tmp_file.$_archive_ext
            else                
                _full_file_archive=/$_tmp_file.$_archive_ext
            fi
            debug "[_restore] full_file_current: [$_full_file_current]"
            debug "[_restore] full_file_dated: [$_full_file_archive]"
            debug "[_restore] full_file_requested: [$_full_file]"
            # f will be the file portion of the current file 
            _f=$(basename "${_full_file_current}")
            debug "[_restore] f: [$_f]"
            if echo $IGNORE_FILES | grep -w "$_f" > /dev/null; then
                debug "[_restore] $_f was in the ignore list; not restoring..."
            else
                debug "[_restore] $_f was not in the ignore list; restoring..."
                if [[ "$MAKE_CHANGES" == "true" ]]; then
                    debug "[_restore] copying [$_full_file_current] to [$_full_file_archive]"
                    try cp -p $_full_file_current $_full_file_archive
                    debug "[_restore] copying [$_full_file] to [$_full_file_current]"
                    try cp -p $_full_file $_full_file_current
                fi
                echo "archived existing [$_full_file_current] to [$_full_file_archive]"
                echo "restored [$_full_file] to [$_full_file_current]"        
                echo ""
            fi            
        else
            _tmp_file=$_opt_file
            if [[ "$_opt_file" == "" ]]; then
                _tmp_file=foo.txt
            fi
            debug "[_restore] [$_opt_file] is not dated; tell the user to give a dated archive file to work with"
            debug "[_restore] TODO: determine if we want to write code here to date backup the file and then restore the latest backed up version"
            echo ""
            echo "You have requested to restore [$_full_file].  This is currently not supported when archiving to the current directory.  Please provide the backup file you want to restore including the date extension as an argument."
            echo "Ex: "
            echo "       archive -r $_tmp_file.20170508093847"
            echo "or "
            echo "       archive -r /tmp/$_tmp_file.20170508093847"
            echo ""
            exit 1
        fi
    else
        # ------ we have archive folder ------
        debug "[_restore] UARCHIVE_HOME [$UARCHIVE_HOME] found..."
        # basic validation
        # -- we must have a current and archive folder if whe have a home and it must exist or error
        if [[ ! -d $_current_folder || ! -d $_dated_folder ]]; then
            echo "Attempting to restore files but detected no current or dated archive folders; this may have occured because of a permissions error.  Please ensure these directories exist and are writeable:"
            echo "$_current_folder"
            echo "$_dated_folder"
            echo ""
            exit 1
        fi
        
        # first, 2 basic options: we are or are not in the archive folder; variable outcome is very different I think
        if [[ "$(echo $_full_file | grep "$UARCHIVE_HOME")" == "" ]]; then
            # ***** we have a directory outside the archive directory *****
            # *************************************************************
            debug "[_restore] [$_full_file] is outside the archive directory [$UARCHIVE_HOME]"
            # we either are a file or a directory of files or error if something else
            if [[ -d "$_full_file" ]]; then
                debug "[_restore] [$_full_file] is a directory"
                 # ask if they want to really do this
                echo "You have requested to restore all files in directory [$_full_file] from your current archive if it exists"
                echo 'Are you sure? [y/N]'
                read _user_answer
                debug "[_restore] user answer: [$_user_answer]"
                echo ""
                if [[ "$_user_answer" != "y" && "$_user_answer" != "Y" ]]; then
                    echo " "
                    echo "done"
                    exit 0
                fi
                
                # debug "[_restore] current_folder: [$_current_folder]"
                for fd in $(find $_full_file/* -prune -type f); do
                    sfd=$(strip_leading_slash $fd)
                    debug "[_restore] calling restore_current_archive_file [$_full_file/$sfd]"
                    restore_current_file "$full_file/$sfd"
                done
               
            elif [[ -f "$_full_file" ]]; then
                debug "[_restore] [$_full_file] is a file"
                debug "[_restore] calling restore_current_file [$_full_file]"
                restore_current_file "$_full_file"
            else
                debug "[_restore] [ $_full_file ] not found or is not a file or directory!"
                echo "[$_full_file] not found!"
            fi
            
        else
            # ***** we have a directory inside the archive directory *****
            # ************************************************************
            debug "[_restore] [$_full_file] is inside the archive directory [$UARCHIVE_HOME]"
            # first check for special cases; if we were passed UARCHIVE_HOME or _current_folder then prompt and restore all current files
            if [[  "$_opt_file" = "" || "$_full_file" == "$UARCHIVE_HOME" || "$_full_file" == "$_current_folder" ]]; then
                debug "[_restore] determined special case for restoring all current archived files"
                debug "[_restore] attempting to restore all files if the passed argument is empty after prompting"
                # ask if they want to really do this since this will be pretty destructive
                echo ""
                echo ""
                echo "You have requested to restore all files from your current archive folder out to their repective locations.  This will restore every file found in the current archive overwriting anything that is currently in the destination location.  It will also create a dated archive of each file found first in case you need it later."
                echo "NOTE: this is recursive; it will apply to every file and direcotry/subdirectory in the current archive folder"
                echo " "
                echo 'Are you sure you want to replace or overwrite all the files in your current archive to their respective locations? [y/N]'
                read _user_answer
                debug "[_restore] user answer: [$_user_answer]"
                echo ""
                if [[ "$_user_answer" != "y" && "$_user_answer" != "Y" ]]; then
                    echo "done"
                    exit 0
                fi
                
                # loop through each file in the current archive directory and send it to its location preserving permissions
                for afd in $(find $_current_folder/* -type f); do
                    debug "[_restore] afd: $afd"
                    debug ""
                    restore_current_archive_file "$afd"
                    debug ""
                done
                
                echo ""
                echo "done"
                exit 0
            fi
            # next disallow the _dated_folder; tell them to use the current directory instead
            if [[  "$_full_file" == "$_dated_folder" ]]; then
                echo "ERROR:"
                echo ""
                echo "requested restore location: $_full_file"
                echo "dated folder: $_dated_folder"
                echo "current folder: $_current_folder"
                echo ""
                echo "You have requested to restore the dated folder directory.  This is not allowed for many reasons; nor are complete dated archive directories.  Please change the parameter to the archive root (\$UARCHIVE_HOME), or current archive directory (\$UARCHIVE_HOME/current) to restore all current archived files out to their locations or you may pick a specific dated archive file to be restored as well.  Alternatively, you can also cd to the non-archive source directory (ie: cd ~) and issue a archive -r command from there to restore all files in that directory but it is not recursive."
                echo "Ex: archive -r \$UARCHIVE_HOME"
                echo "Ex: archive -r \$UARCHIVE_HOME/dated/Users/sstacha/temp.txt.20170509135856"
                echo ""
                exit 1
            fi
            
            # finally, if we made it here,  we have to be a subdirectory or file in the dated or the current archvie directory
            if [[ "$(echo $_full_file | grep "$_current_folder")" != "" ]]; then
                # *************************************************************
                # ----- current archive folder file/directory -----
                # *************************************************************
                debug "[_restore] [$_full_file] is inside the current archive directory [$_current_folder]"
                if [[ -d "$_full_file" ]]; then
                    debug "[_restore] [ $_full_file ] is a current archive directory"
                    for fd in $(find $_full_file/* -prune -type f); do
                        sfd=$(strip_leading_slash $fd)
                        debug "[_restore] calling restore_current_archive_file [$_full_file/$sfd]"
                        restore_current_archive_file "$full_file/$sfd"
                    done
                    restore_current_archive_directory "$_full_file"
                elif [[ -f "$_full_file" ]]; then
                    debug "[_restore] [ $_full_file ] is a current archive file"
                    restore_current_archive_file "$_full_file"
                else
                    debug "[_restore] [ $_full_file ] not found or is not a file or directory!"
                    echo "[$_full_file] not found!"
                fi
                
            elif [[ "$(echo $_full_file | grep "$_dated_folder")" != "" ]]; then
                # *************************************************************
                # ----- dated archive folder file/directory -----
                # *************************************************************
                # NOTE: only allow individual files not groups of files becuase of the datetime ext.
                debug "[_restore] [$_full_file] is inside the dated archive directory [$_dated_folder]"
                if [[ -d "$_full_file" ]]; then
                    echo "You have requested to restore a directory in the dated folder directory.  This is not allowed for many reasons.  Please change the parameter to the archive root (\$UARCHIVE_HOME), or current archive directory (\$UARCHIVE_HOME/current) to restore all current archived files out to their locations or you may pick a specific dated archive file in the dated archive directory to be restored as well.  Alternatively, you can also cd to the non-archive source directory (ie: cd ~) and issue a archive -r command from there to restore all files in that directory but it is not recursive."
                    echo "Ex: archive -r \$UARCHIVE_HOME"
                    echo "Ex: archive -r \$UARCHIVE_HOME/dated/Users/sstacha/temp.txt.20170509135856"
                    echo ""
                    exit 1
                elif [[ -f "$_full_file" ]]; then
                    # this is good; restore the requested file
                    debug "[_restore] restoring dated archive file [$_full_file]"
                    restore_dated_archive_file "$_full_file"
                else
                    debug "[_restore] [ $_full_file ] not found or is not a file or directory!"
                    echo "[$_full_file] not found!"
                fi
                
            else
                echo ""
                echo "ERROR: "
                echo "UARCHIVE_HOME: $UARCHIVE_HOME"
                echo "dated folder: $_dated_folder"
                echo "current folder: $_current_folder"
                echo ""
                echo "You requested to restore [$_full_file] from the archive location, however, neither a current or dated directory was found.  Please ensure you are restoring files or directories inside of one of these locations.  Alternatively, you can go to the folder you would like restored into and issue a archive -r command there."
                echo ""
                exit 1
            fi
        fi
    fi
}

# parse all options using getargs...
# A POSIX variable
OPTIND=1         # Reset in case getopts has been used previously in the shell.

while getopts "h?vcf:rs" opt; do
    case "$opt" in
    h|\?)
        show_help
        exit 0
        ;;
    v)  _opt_verbose=true
        ;;
    c)  _opt_current=true
        ;;
    r)  _opt_restore=true
        ;;
    s)  _opt_sync=true
        ;;
    esac
done

shift $((OPTIND-1))

[ "$1" = "--" ] && shift

_opt_file=$@
debug "options: "
debug "verbose:$_opt_verbose"
debug "current:$_opt_current"
debug "restore:$_opt_restore"
debug "argument: $_opt_file"
debug ""

if [[ "$_opt_file" == "." ]]; then
    _opt_file=""
fi
_full_file=$(get_absolute_file)
_full_file=$(strip_slash $_full_file)
_archive_ext=$(get_date_ext)
_archive_folder="$(strip_slash "$UARCHIVE_HOME")"
_dated_folder=""
_current_folder=""
if [[ "$_archive_folder" != "" ]]; then
    _dated_folder="$(strip_slash $_archive_folder/dated)"    
    _current_folder="$(strip_slash $_archive_folder/current)"
    # before we make a copy lets make sure the directory exists so it doesn't error (if we have make_changes)
    if [[ "$MAKE_CHANGES" == "true" ]]; then
        if [[ ! -d $_dated_folder ]]; then
            mkdir -p $_dated_folder
        fi
        if [[ ! -d $_current_folder ]]; then
            mkdir -p $_current_folder
        fi
    fi
fi
#_full_file_archive="$_dated_folder/$_full_file.$_archive_ext"
#_full_file_current="$_current_folder/$_full_file"
if [[ "$MAKE_CHANGES" == "false" ]]; then
    echo ""
    echo ""
    echo "     !!! WARNING: MAKE_CHANGES=false; no writable changes will be made only simulated !!!"
    echo ""
    echo ""
fi

debug "archive_ext: $_archive_ext"
debug "archive_folder: $_archive_folder"
debug "dated_folder: $_dated_folder"
debug "current_folder: $_current_folder"
debug ""
debug "opt file: $_opt_file"
debug "full file: $_full_file"
#debug "full file archive: $_full_file_archive"
#debug "full file current: $_full_file_current"

#if [[ -z $ARCHIVE_DATED && ! -z $UARCHIVE_HOME ]]; then
#    ARCHIVE_DATED=$UARCHIVE_HOME/dated
#fi
#if [[ -z $ARCHIVE_CURRENT && ! -z $UARCHIVE_HOME ]]; then
#    ARCHIVE_CURRENT=$UARCHIVE_HOME/current
#fi
#
#dirs_exist=0
## check that we have appropriate directories or bail
#if [ -f "$ARCHIVE_DIR" ]; then
#	if [ -f "$CURRENT_DIR" ]; then
#		dirs_exist = 1
#	fi
#fi
#if [ $dirs_exist ]; then
#	debug 'archive and current directories exist; continuing...'
#else
#	echo 'ERROR: archive and current directory does not exist'
#	echo "run: sudo mkdir -p $ARCHIVE_DIR"
#	echo "run: sudo mkdir -p $CURRENT_DIR"
#	echo "run: sudo chown -R ubuntu:_developer $ARCHIVE_DIR"
#	echo "run: sudo chown -R ubuntu:_developer $CURRENT_DIR"
#	echo "run: sudo chmod -R 775 $ARCHIVE_DIR"
#	echo "run: sudo chmod -R 775 $CURRENT_DIR"
#	echo " then try archiving your file again"
#	exit 1
#fi

# ---- begin validation checks ----
# do not allow archiving current if there is no $UARCHIVE_HOME
if [[ "$_opt_current" = "true" && "$UARCHIVE_HOME" = "" ]]; then
    echo "*** ERROR ***"
    echo "You have requested to archive a current version of one or more files, however, you have not specified a UARCHIVE_HOME environment variable.  You can not archive the current file into itself.  Either remove the -c option to make an archived dated file in the same directory or provide a UARCHIVE_HOME to place dated and current files in."
    echo ""
    exit 1
fi
# validate that there are not combinations of options that do not make sense
# it does not make sense to allow archiving current and restoring current at the same time.  r should not be used
#   with c or s
if [[ ("$_opt_current" = "true" && "$_opt_restore" = "true") || ("$_opt_sync" = "true" && "$_opt_restore" = "true") ]]; then
    echo "*** ERROR ***"
    echo "You have requested to both archive current files and restore current files at the same time.  This does not make sense and is probably an error.  If this was truly your intention please enter each command separately in the order you want to do them."
    echo ""
    exit 1
fi
# it does not make sense to sync and archive current at the same time; sync requires file from current_achive and current
#   requires external file outside the archive directory
if [[ "$_opt_current" = "true" && "$_opt_sync" = "true" ]]; then
    echo "*** ERROR ***"
    echo "You have requested to sync all current files and sync a current file or directory.  This does not make sense since the first case uses the archive directory to specify which files and the second uses an external directory.  Retry with one or the other."
    echo ""
    exit 1
fi
# ---- end validation checks ----
# todo: check for root /, /usr, /var, /opt, /home, /dev, /lib, /mnt, /run, /proc, /snap, /sys, maybe warn?

debug "passed option validation checks"
debug " "

# essentially, based on options, we are either restoring files or archiving files
if [ "$_opt_restore" = "true" ]; then
    debug "restoring..."
    _restore
else
    debug "archiving..."
    # if we are archiving or archiving current do not allow files in the archive directory.  while this might be legitimate in very rare case it is almost always an error.  Let them do copys manually instead
    debug "full file: $_full_file"
    debug "archive home: $UARCHIVE_HOME"
    debug "grep: $(echo $_full_file | grep "$UARCHIVE_HOME")"
    if [[ "$UARCHIVE_HOME" != "" && "$(echo "$_full_file" | grep "$UARCHIVE_HOME")" != "" ]]; then
        echo "You have requested to archive a file in the archive directory.  This is not allowed as it can cause problems.  You probably meant to archive the acutal file instead optionally passing the -c argument.  However, if you really want to manaipulate files in the archive directory you can do so manually; this is not recommended."
        exit 1
    fi
    _archive
fi
echo " "
echo "done"